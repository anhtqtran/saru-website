import { Component, OnInit, OnDestroy } from '@angular/core';
import { SocketService, Message, SendMessageData } from "../services/socket.service";

@Component({
  selector: 'app-message',
  standalone: false,
  templateUrl: './message.component.html',
  styleUrls: ['./message.component.css']
})
export class MessageComponent implements OnInit, OnDestroy {
  isChatOpen: boolean = false;
  message: string = '';
  messages: Message[] = [];
  customerName: string = 'Kh√°ch h√†ng';
  isEmojiPickerOpen: boolean = false;
  hasNewMessage: boolean = false;

  // Danh s√°ch emoji (c√≥ th·ªÉ m·ªü r·ªông)
  emojis: string[] = [
    'üòÄ', 'üòç', 'üòÇ', 'üòé', 'üò¢', 'üò°', 'üëç', 'üëè', '‚ù§Ô∏è', 'üî•',
    'üòä', 'üòò', 'ü§©', 'üò¥', 'üò±', 'üò§', 'üëÄ', 'üí™', 'üíï', '‚ú®'
  ];

  constructor(private socketService: SocketService) {}

  ngOnInit(): void {
    this.socketService.registerUser(this.customerName);

    this.socketService.getMessages().subscribe({
      next: (data) => {
        this.messages = data.filter(
          (msg) => msg.user === this.customerName || (msg.user === 'Admin' && msg.targetUser === this.customerName)
        );
      },
      error: (err) => {
        console.error('L·ªói khi l·∫•y tin nh·∫Øn:', err);
      }
    });

    this.socketService.onReceiveMessage().subscribe({
      next: (data) => {
        if (data.user === 'Admin' && data.targetUser === this.customerName) {
          this.messages.push(data);
          if (!this.isChatOpen) {
            this.hasNewMessage = true; // Hi·ªÉn th·ªã badge khi c√≥ tin nh·∫Øn m·ªõi v√† chat ch∆∞a m·ªü
          }
          this.messages = [...this.messages];
        } else if (data.user === this.customerName) {
          this.messages.push(data);
          this.messages = [...this.messages];
        }
      },
      error: (err) => {
        console.error('L·ªói khi nh·∫≠n tin nh·∫Øn:', err);
      }
    });
  }

  toggleChat(): void {
    this.isChatOpen = !this.isChatOpen;
    if (this.isChatOpen) {
      this.hasNewMessage = false; // ·∫®n badge khi m·ªü chat
    }
  }

  toggleEmojiPicker(): void {
    this.isEmojiPickerOpen = !this.isEmojiPickerOpen;
  }

  selectEmoji(emoji: string): void {
    this.message += emoji;
    this.isEmojiPickerOpen = false;
  }

  sendMessage(): void {
    if (this.message.trim()) {
      const newMessage: SendMessageData = { 
        user: this.customerName, 
        message: this.message,
        targetUser: 'Admin'
      };
      this.sendMessageToServer(newMessage);
    }
  }

  private sendMessageToServer(newMessage: SendMessageData): void {
    // Th√™m tin nh·∫Øn v√†o danh s√°ch v·ªõi ki·ªÉu Message
    const displayMessage: Message = {
      ...newMessage,
      timestamp: new Date().toISOString()
    };
    this.messages.push(displayMessage);
    this.socketService.sendMessage(newMessage);
    this.message = '';
    this.messages = [...this.messages];
  }

  ngOnDestroy(): void {
    this.socketService.disconnect();
  }
}