import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import picaLib from 'pica';
import * as i0 from "@angular/core";
import * as i1 from "./img-exif.service";
const pica = picaLib();
const globalWindow = window;
export class Ng2PicaService {
    constructor(imageExifService) {
        this.imageExifService = imageExifService;
    }
    resize(files, width, height, keepAspectRatio = false) {
        let resizedFile = new Subject();
        for (let i = 0; i < files.length; i++) {
            this.resizeFile(files[i], width, height, keepAspectRatio).then((returnedFile) => {
                resizedFile.next(returnedFile);
            }).catch((error) => {
                resizedFile.error(error);
            });
        }
        return resizedFile.asObservable();
    }
    resizeCanvas(from, to, options) {
        let result = new Promise((resolve, reject) => {
            let curPica = pica;
            if (!curPica || !curPica.resize) {
                curPica = new globalWindow.pica();
            }
            curPica.resize(from, to, options)
                .then((response) => {
                resolve(response);
            }, (error) => {
                reject(error);
            });
        });
        return result;
    }
    resizeBuffer(options) {
        let result = new Promise((resolve, reject) => {
            let curPica = pica;
            if (!curPica || !curPica.resizeBuffer) {
                curPica = new globalWindow.pica();
            }
            curPica.resizeBuffer(options)
                .then((response) => {
                resolve(response);
            }, (error) => {
                reject(error);
            });
        });
        return result;
    }
    resizeFile(file, width, height, keepAspectRatio = false) {
        let result = new Promise((resolve, reject) => {
            let fromCanvas = document.createElement('canvas');
            let ctx = fromCanvas.getContext('2d');
            let img = new Image();
            img.onload = () => {
                this.imageExifService.getOrientedImage(img).then(orientedImg => {
                    globalWindow.URL.revokeObjectURL(img.src);
                    fromCanvas.width = orientedImg.width;
                    fromCanvas.height = orientedImg.height;
                    ctx?.drawImage(orientedImg, 0, 0);
                    let imageData = ctx?.getImageData(0, 0, orientedImg.width, orientedImg.height);
                    if (keepAspectRatio && imageData) {
                        let ratio = Math.min(width / imageData.width, height / imageData.height);
                        width = Math.round(imageData.width * ratio);
                        height = Math.round(imageData.height * ratio);
                    }
                    let useAlpha = true;
                    if (file.type === "image/jpeg" || (file.type === "image/png" && !this.isImgUsingAlpha(imageData))) {
                        //image without alpha
                        useAlpha = false;
                        ctx = fromCanvas.getContext('2d', { 'alpha': false });
                        ctx?.drawImage(orientedImg, 0, 0);
                    }
                    let toCanvas = document.createElement('canvas');
                    toCanvas.width = width;
                    toCanvas.height = height;
                    this.resizeCanvas(fromCanvas, toCanvas, { 'alpha': useAlpha })
                        .then((resizedCanvas) => {
                        resizedCanvas.toBlob((blob) => {
                            if (!blob) {
                                return reject('error blob');
                            }
                            let newFile = this.generateResultFile(blob, file.name, file.type, new Date().getTime());
                            resolve(newFile);
                        }, file.type);
                    })
                        .catch((error) => {
                        reject(error);
                    });
                });
            };
            img.src = globalWindow.URL.createObjectURL(file);
        });
        return result;
    }
    isImgUsingAlpha(imageData) {
        for (var i = 0; i < imageData.data.length; i += 4) {
            if (imageData.data[i + 3] !== 255) {
                return true;
            }
        }
        return false;
    }
    generateResultFile(blob, name, type, lastModified) {
        let resultFile = new Blob([blob], { type: type });
        return this.blobToFile(resultFile, name, lastModified);
    }
    blobToFile(blob, name, lastModified) {
        let file = blob;
        file.name = name;
        file.lastModified = lastModified;
        //Cast to a File() type
        return file;
    }
}
Ng2PicaService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: Ng2PicaService, deps: [{ token: i1.ImgExifService }], target: i0.ɵɵFactoryTarget.Injectable });
Ng2PicaService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: Ng2PicaService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: Ng2PicaService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.ImgExifService }]; } });
//# sourceMappingURL=data:application/json;base64,