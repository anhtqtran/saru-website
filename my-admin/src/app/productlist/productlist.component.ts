import { Component, OnInit, HostListener } from '@angular/core';
import { ProductService } from '../services/product.service';
import { debounceTime, distinctUntilChanged, Subject } from 'rxjs';
import { Router } from '@angular/router';

@Component({
  selector: 'app-productlist',
  templateUrl: './productlist.component.html',
  styleUrls: ['./productlist.component.css'],
  standalone: false
})
export class ProductlistComponent implements OnInit {
  products: any[] = [];
  selectAll: boolean = false;
  itemsPerPage: number = 10;
  displayedProducts: any[] = [];
  currentPage: number = 1;
  isFilterDropdownOpen: boolean = false;
  selectedFilter: string = 'category';
  selectedValue: string = '';
  searchSubject = new Subject<string>();
  searchQuery: string = '';
  searchSuggestions: any[] = [];

  // C√°c t√πy ch·ªçn l·ªçc (Ban ƒë·∫ßu r·ªóng, s·∫Ω c·∫≠p nh·∫≠t t·ª´ API)
  filterOptions: any = {
    category: ['Kh√°c', 'Th·ª±c ph·∫©m', 'ƒê·ªì u·ªëng'],
    brand: [], // ‚ö° C·∫≠p nh·∫≠t t·ª´ API
    price: ['D∆∞·ªõi 1.000.000ƒë', '1.000.000ƒë-5.000.000ƒë', 'Tr√™n 5.000.000ƒë']
  };

  constructor(private productService: ProductService, private router: Router) { }

  ngOnInit(): void {
    this.fetchProducts();
    this.fetchFilters(); // ‚ö° G·ªçi API l·∫•y danh s√°ch nh√† cung c·∫•p
    // ‚úÖ Th√™m debounce ƒë·ªÉ gi·∫£m s·ªë l·∫ßn request API khi nh·∫≠p
    this.searchSubject.pipe(
      debounceTime(300), // Ch·ªù 300ms sau khi g√µ
      distinctUntilChanged() // Ch·ªâ g·ªçi API khi chu·ªói thay ƒë·ªïi
    ).subscribe(query => {
      if (query.length > 1) {
        this.fetchSearchSuggestions(query);
      } else {
        this.searchSuggestions = [];
      }
    });
  }


  fetchProducts(): void {
    this.productService.getProducts().subscribe(
      (data) => {
        this.products = data.map(product => ({
          ...product,
          ProductPrice: product.ProductPrice || 0,
          StockQuantity: product.StockQuantity || 0
        }));
        console.log("‚úÖ D·ªØ li·ªáu API ƒë√£ t·∫£i:", this.products);
        this.updateDisplayedProducts();
      },
      (error) => {
        console.error('‚ùå L·ªói khi t·∫£i s·∫£n ph·∫©m:', error);
      }
    );
  }


   // ‚úÖ H√†m g·ªçi API t√¨m ki·∫øm g·ª£i √Ω
   fetchSearchSuggestions(query: string): void {
    this.productService.getSearchSuggestions(query).subscribe(
      (suggestions) => {
        this.searchSuggestions = suggestions;
      },
      (error) => {
        console.error('‚ùå L·ªói khi t√¨m ki·∫øm g·ª£i √Ω:', error);
      }
    );
  }
  // ‚úÖ H√†m ch·ªçn s·∫£n ph·∫©m t·ª´ g·ª£i √Ω
  // ‚úÖ Khi nh·∫•p v√†o g·ª£i √Ω, c·∫≠p nh·∫≠t input v√† l·ªçc ngay l·∫≠p t·ª©c
selectSuggestion(suggestion: string): void {
  this.searchQuery = suggestion; // G√°n t√™n s·∫£n ph·∫©m v√†o thanh t√¨m ki·∫øm
  this.searchSuggestions = []; // ·∫®n danh s√°ch g·ª£i √Ω
  this.applySearch(); // Th·ª±c hi·ªán t√¨m ki·∫øm ngay sau khi ch·ªçn
}

  // ‚úÖ H√†m t√¨m ki·∫øm khi nh·∫•n enter ho·∫∑c ch·ªçn g·ª£i √Ω
  // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m khi nh·∫•n Enter
applySearch(): void {
  if (!this.searchQuery.trim()) {
      this.displayedProducts = [...this.products]; // N·∫øu kh√¥ng nh·∫≠p g√¨, hi·ªÉn th·ªã t·∫•t c·∫£
  } else {
      this.displayedProducts = this.products.filter(product =>
          product.ProductName.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
          product.ProductSKU.toLowerCase().includes(this.searchQuery.toLowerCase())
      );
  }

  // ‚úÖ Ki·ªÉm tra danh s√°ch hi·ªÉn th·ªã sau khi l·ªçc
  console.log("‚úÖ S·∫£n ph·∫©m sau khi l·ªçc:", this.displayedProducts);
}

  // üî• Th√™m API ƒë·ªÉ l·∫•y danh s√°ch nh√† cung c·∫•p (ProductBrand)
  fetchFilters(): void {
    this.productService.getFilters().subscribe(
      (data) => {
        console.log("üéØ D·ªØ li·ªáu b·ªô l·ªçc t·ª´ API:", data);
        this.filterOptions.brand = data.brands || []; // C·∫≠p nh·∫≠t danh s√°ch nh√† cung c·∫•p
      },
      (error) => {
        console.error('‚ùå L·ªói khi t·∫£i danh s√°ch b·ªô l·ªçc:', error);
      }
    );
  }


  updateDisplayedProducts(fromFilter: boolean = false): void {
    console.log(`üîπ C·∫≠p nh·∫≠t danh s√°ch hi·ªÉn th·ªã: Trang ${this.currentPage}, Hi·ªÉn th·ªã ${this.itemsPerPage}`);

    if (!fromFilter && this.products.length === 0) {
        console.log("üõë Danh s√°ch s·∫£n ph·∫©m r·ªóng, g·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi...");
        this.fetchProducts();
        return;
    }

    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    const endIndex = startIndex + this.itemsPerPage;

    // ‚úÖ N·∫øu g·ªçi t·ª´ filter, d√πng `displayedProducts`, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ to√†n b·ªô s·∫£n ph·∫©m
    const source = fromFilter ? this.displayedProducts : this.products;
    this.displayedProducts = source.slice(startIndex, endIndex);

    console.log("‚úÖ Danh s√°ch hi·ªÉn th·ªã sau c·∫≠p nh·∫≠t:", this.displayedProducts);
}

// ‚úÖ H√†m ƒë·ªÉ h·ªßy b·ªô l·ªçc v√† reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
cancelFilter(): void {
  console.log("üîÑ H·ªßy b·ªô l·ªçc, kh√¥i ph·ª•c danh s√°ch s·∫£n ph·∫©m g·ªëc.");
  this.selectedFilter = 'category'; // Reset lo·∫°i b·ªô l·ªçc
  this.selectedValue = ''; // X√≥a gi√° tr·ªã l·ªçc
  this.displayedProducts = [...this.products]; // Kh√¥i ph·ª•c danh s√°ch s·∫£n ph·∫©m ƒë·∫ßy ƒë·ªß
  this.currentPage = 1; // Quay l·∫°i trang ƒë·∫ßu ti√™n
  this.toggleFilterDropdown(); // ƒê√≥ng dropdown b·ªô l·ªçc
  this.updateDisplayedProducts(true); // C·∫≠p nh·∫≠t l·∫°i hi·ªÉn th·ªã
}


  onItemsPerPageChange(event: any): void {
    this.itemsPerPage = Number(event.target.value);
    this.currentPage = 1;
    console.log(`üîπ Ng∆∞·ªùi d√πng ch·ªçn hi·ªÉn th·ªã: ${this.itemsPerPage} s·∫£n ph·∫©m`);
    this.updateDisplayedProducts();
  }


  goToPage(page: number): void {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.updateDisplayedProducts();
    }
  }

  get totalPages(): number {
    return Math.ceil(this.products.length / this.itemsPerPage);
  }


  toggleSelectAll(): void {
    this.products.forEach(product => product.selected = this.selectAll);
  }

  deleteProduct(productId: string): void {
    const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?");
    if (confirmDelete) {
      console.log("üõë X√≥a s·∫£n ph·∫©m:", productId);
      this.productService.deleteProduct(productId).subscribe(
        () => {
          console.log("‚úÖ X√≥a th√†nh c√¥ng!");
          this.products = this.products.filter(product => product.ProductID !== productId);
          this.updateDisplayedProducts();
        },
        (error) => {
          console.error('‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
        }
      );
    }
  }

  toggleFilterDropdown(): void {
    this.isFilterDropdownOpen = !this.isFilterDropdownOpen;
  }

  applyFilter(): void {
    console.log(`üîπ L·ªçc s·∫£n ph·∫©m theo ${this.selectedFilter}: ${this.selectedValue}`);

    if (!this.selectedValue) {
        this.displayedProducts = [...this.products]; // ‚úÖ Hi·ªÉn th·ªã t·∫•t c·∫£ n·∫øu kh√¥ng c√≥ gi√° tr·ªã l·ªçc
    } else {
        this.displayedProducts = this.products.filter(product => {
            if (this.selectedFilter === 'stock') {
                if (this.selectedValue === 'lowStock') return product.StockQuantity < 50;
                if (this.selectedValue === 'sufficientStock') return product.StockQuantity >= 50;
            } else if (this.selectedFilter === 'brand') {
                return product.ProductBrand === this.selectedValue;
            } else if (this.selectedFilter === 'price') {
                const price = product.ProductPrice;
                if (this.selectedValue === 'D∆∞·ªõi 1.000.000ƒë') return price < 1000000;
                if (this.selectedValue === '1.000.000ƒë-5.000.000ƒë') return price >= 1000000 && price <= 5000000;
                if (this.selectedValue === 'Tr√™n 5.000.000ƒë') return price > 5000000;
            }
            return true;
        });
    }

    console.log("‚úÖ Danh s√°ch s·∫£n ph·∫©m sau khi l·ªçc:", this.displayedProducts);

    this.currentPage = 1; // ‚úÖ Quay l·∫°i trang ƒë·∫ßu ti√™n khi l·ªçc
    this.updateDisplayedProducts(true); // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
    this.toggleFilterDropdown(); // ‚úÖ ƒê√≥ng dropdown sau khi l·ªçc
}


// ‚úÖ ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang edit-product
navigateToEditProduct(): void {
  this.router.navigate(['/edit-product']);
}


  // üõë ƒê√≥ng dropdown khi click ra ngo√†i
  @HostListener('document:click', ['$event'])
  onClickOutside(event: Event): void {
    const target = event.target as HTMLElement;
    if (!target.closest('.filter-container') && this.isFilterDropdownOpen) {
      this.isFilterDropdownOpen = false;
    }
  }
}
